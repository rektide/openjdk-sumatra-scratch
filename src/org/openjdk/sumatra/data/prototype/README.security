/*
 * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

Anyone modifying this code has to be aware of the security implications
of working with Unsafe code.  Several rules are used to help ensure that the
unsafe code cannot be used in unauthorized (VM/protection-subverting) ways.

First, package protection is used to hide methods that are effectively "peek"
and "poke" from public view.

Second, to prevent unauthorized extension of public classes, class constructors
are package protected; factories are the external interface for making new
things.  A non-public, non-protected constructor means that any would-be
extender in another package will be unable to define any constructor.

Third, the rule is that any class that has actual implementations of "val" and
"put" methods (or in the case of bitfields, prim and putPrim) is either final,
non-public, or both.

Fourth, the integer/long fields that govern the behavior of Layout and Location
objects should always be final.
